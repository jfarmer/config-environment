#!/usr/bin/env bash

if [[ "${__SETUP_INCLUDES_FUNCTIONS:-""}" == "yes" ]];then
  return 0
fi

__SETUP_INCLUDES_FUNCTIONS="yes"

get_system_name() {
  uname -s
}

get_platform_name() {
  local system_name="$(get_system_name)"

  case $system_name in
    Darwin*)
      echo "mac"
      ;;
    MINGW_NT*)
      echo "windows"
      ;;
    *)
      echo "unknown"
      ;;
  esac
}

is_platform_mac() {
  [[ "$(get_platform_name)" == "mac" ]]
}

is_platform_windows() {
  [[ "$(get_platform_name)" == "windows" ]]
}

RES_COL=54
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_WARNING="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

success() {
  $MOVE_TO_COL
  echo -n "["
  $SETCOLOR_SUCCESS
  echo -n " OK "
  $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"

  return 0
}

failure() {
  $MOVE_TO_COL
  echo -n "["
  $SETCOLOR_FAILURE
  echo -n "FAIL"
  $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"

  return 1
}

action() {
  local MSG
  local rc

  MSG=$1

  echo -n "${MSG} "
  shift

  "$@" && success "${STRING}" || failure "${STRING}"

  rc=$?

  echo

  return $rc
}

guard() {
  action "$@"

  [[ "$?" -ne "0" ]]
}

guard_mac() {
  if is_platform_mac;then
    guard "$@"
  else
    return 1
  fi
}

is_in_path() {
  [[ ":${PATH}:" == *:"${1}":* ]]
}

command_exists () {
  type "$1" >/dev/null 2>&1
}

create_file_backup() {
  if [[ $# -lt 1 ]];then
    echo "create_file_backup requires the name of a file to back up"
    return 1
  fi

  local file_to_backup=$1

  # If there's nothing to back up, just return
  if [[ ! -f "${file_to_backup}" ]];then
    return 0
  fi

  local backup_basename=$(basename "${file_to_backup}")
  local backup_dirname=$(dirname "${file_to_backup}")

  local seconds=$(date '+%s')

  local backup_prefix=$(echo "${backup_basename}" | cut -d. -f-1)
  local backup_suffix=$(echo "${backup_basename}" | cut -s -d. -f2-)

  echo "prefix: ${backup_prefix}"
  echo "suffic: ${backup_suffix}"

  local backup_filename="${backup_prefix}.${seconds}.backup"

  if [[ -n "${backup_suffix}" ]];then
    backup_filename="${backup_filename}.${backup_suffix}"
  fi

  cp "${file_to_backup}" "${backup_dirname}/${backup_filename}"
}

copy_with_backup() {
  # Assume user is handling everything is destination is a symlink
  if [[ -L "${dest}" ]];then
    return 0
  fi

  create_file_backup "${dest}" && cp "${src}" "${dest}"
}
